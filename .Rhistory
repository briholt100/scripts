final_df_2007<-final_df_2007[(is.na(final_df_2007$Salary))==F,]
final_df_2007<-final_df_2007[,c(1:4,8,5:7)]  # Institution year Employee Job_title  Salary et mp percent_ft
final_df_2007$job.cat<-"other"
head(final_df_2007)
table(final_df_2007$et)
grep('^C|^H',final_df_2007$et,value=T)
final_df_2007[grep('^C|^H',final_df_2007$et),]
mylist<-make_list(links) #links=links can also be used after previous line run
table(final_df_2009$et)
r=list()
yr=list()
for (i in 1:length(mylist)){
if (grepl("Eastern",mylist[[i]][2])){ #I want to first try with parantheses, and if that fails, then use the idiosyncratic search for Eastern
r[[i]]<-regexec("^[[:digit:]]{4} (.*) [[:digit:]]{1}",mylist[[i]][2]);print("Eastern")
} else {
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
}
yr[[i]]<-regexec("^[[:digit:]]{4}",mylist[[i]][2])
} #'?' makes it less greedy  and I'm not sure why it's not picking up eastern here.
df_list<-list()
for (i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
text<-gsub('ET-PU  MP  %FT','ET-PU     MP     %FT',text)
text<-recursive_replace(text)
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
final_df_2009<-do.call("rbind",df_list)  # this converts df_list into a dataframe.
colnames(final_df_2009)<-c('Institution','year','Employee','Job.Title','et','mp','percent_ft','Salary')
final_df_2009<-final_df_2009[(is.na(final_df_2009$Salary))==F,]
final_df_2009<-final_df_2009[,c(1:4,8,5:7)]  # Institution year Employee Job_title  Salary et mp percent_ft
final_df_2009$job.cat<-"other"
head(final_df_2009)
table(final_df_2009$et)
grep("\\)",final_df_2009$et)
fix<-grep("\\)",final_df_2009$et)
final_df_2009[final_df_2007,]
final_df_2009[fix,]
recursive_replace<-function(text=text){
text<-gsub('([[:alpha:]]) {2}([[:alpha:]])','\1 \2',text)
while (grepl('\\. +HRLY ',text)){
text<-gsub('\\. +HRLY',' HRLY',text)
print (grepl('\\. +HRLY ',text))
}
while (grepl("'S +\\)",text)){
text<-gsub("'S +\\)","'S\\)",text)
print (grepl("'S +\\)",text))
}
while (grepl(' {2}',text)){
text<-gsub(' {2}','\t',text)
}
while (grepl('\t\t|\t \t',text)){
text<-gsub('\t\t|\t \t','\t',text)
print (grepl('\t\t|\t \t',text))
}
return(text)
}
mylist<-make_list(links) #links=links can also be used after previous line run
mylist_bak<-mylist
r=list()
yr=list()
for (i in 1:length(mylist)){
if (grepl("Eastern",mylist[[i]][2])){ #I want to first try with parantheses, and if that fails, then use the idiosyncratic search for Eastern
r[[i]]<-regexec("^[[:digit:]]{4} (.*) [[:digit:]]{1}",mylist[[i]][2]);print("Eastern")
} else {
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
}
yr[[i]]<-regexec("^[[:digit:]]{4}",mylist[[i]][2])
} #'?' makes it less greedy  and I'm not sure why it's not picking up eastern here.
df_list<-list()
for (i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
text<-gsub('ET-PU  MP  %FT','ET-PU     MP     %FT',text)
text<-recursive_replace(text)
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
final_df_2009<-do.call("rbind",df_list)  # this converts df_list into a dataframe.
colnames(final_df_2009)<-c('Institution','year','Employee','Job.Title','et','mp','percent_ft','Salary')
final_df_2009<-final_df_2009[(is.na(final_df_2009$Salary))==F,]
final_df_2009<-final_df_2009[,c(1:4,8,5:7)]  # Institution year Employee Job_title  Salary et mp percent_ft
final_df_2009$job.cat<-"other"
head(final_df_2009)
table(final_df_2009$et)
mylist<-mylist_bak
fix<-grep("- HOURLY",final_df_2009$et)
fix
final_df_2009[fix,]
fix<-grep(" +- HOURLY",final_df_2009$et)
fix
fix<-grep(" {1,}\- HOURLY",final_df_2009$et)
fix<-grep(" {1,}- HOURLY",final_df_2009$et)
fix
fix<-grep(" - HOURLY",final_df_2009$et)
fix
grep("- HOURLY",final_df_2009$et)
grep(" - HOURLY",final_df_2009$et)
grep("TECH  - HOURLY",final_df_2009$et)
fix
grep(" - HOURLY",final_df_2009$et)
grep("- HOURLY",final_df_2009$et)
final_df_2009[grep("- HOURLY",final_df_2009$et),]
recursive_replace<-function(text=text){
text<-gsub('([[:alpha:]]) {2}([[:alpha:]])','\1 \2',text)
while (grepl('\\. +HRLY ',text)){
text<-gsub('\\. +HRLY',' HRLY',text)
print (grepl('\\. +HRLY ',text))
}
while (grepl("'S +\\)",text)){
text<-gsub("'S +\\)","'S\\)",text)
print (grepl("'S +\\)",text))
}
while (grepl(" +- HOURLY",text)){
text<-gsub(" +- HOURLY"," - HOURLY",text)
print (grepl(" +- HOURLY",text))
}
while (grepl(' {2}',text)){
text<-gsub(' {2}','\t',text)
}
while (grepl('\t\t|\t \t',text)){
text<-gsub('\t\t|\t \t','\t',text)
print (grepl('\t\t|\t \t',text))
}
return(text)
}
mylist<-mylist_bak
table(final_df_2009$et)
r=list()
yr=list()
for (i in 1:length(mylist)){
if (grepl("Eastern",mylist[[i]][2])){ #I want to first try with parantheses, and if that fails, then use the idiosyncratic search for Eastern
r[[i]]<-regexec("^[[:digit:]]{4} (.*) [[:digit:]]{1}",mylist[[i]][2]);print("Eastern")
} else {
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
}
yr[[i]]<-regexec("^[[:digit:]]{4}",mylist[[i]][2])
} #'?' makes it less greedy  and I'm not sure why it's not picking up eastern here.
df_list<-list()
for (i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
text<-gsub('ET-PU  MP  %FT','ET-PU     MP     %FT',text)
text<-recursive_replace(text)
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
recursive_replace<-function(text=text){
text<-gsub('([[:alpha:]]) {2}([[:alpha:]])','\1 \2',text)
while (grepl('\\. +HRLY ',text)){
text<-gsub('\\. +HRLY',' HRLY',text)
print (grepl('\\. +HRLY ',text))
}
while (grepl("'S +\\)",text)){
text<-gsub("'S +\\)","'S\\)",text)
print (grepl("'S +\\)",text))
}
while (grepl(" {2,}- HOURLY",text)){
text<-gsub(" {2,}- HOURLY"," - HOURLY",text)
print (grepl(" {2,}- HOURLY",text))
}
while (grepl(' {2}',text)){
text<-gsub(' {2}','\t',text)
}
while (grepl('\t\t|\t \t',text)){
text<-gsub('\t\t|\t \t','\t',text)
print (grepl('\t\t|\t \t',text))
}
return(text)
}
mylist<-mylist_bak
r=list()
yr=list()
for (i in 1:length(mylist)){
if (grepl("Eastern",mylist[[i]][2])){ #I want to first try with parantheses, and if that fails, then use the idiosyncratic search for Eastern
r[[i]]<-regexec("^[[:digit:]]{4} (.*) [[:digit:]]{1}",mylist[[i]][2]);print("Eastern")
} else {
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
}
yr[[i]]<-regexec("^[[:digit:]]{4}",mylist[[i]][2])
} #'?' makes it less greedy  and I'm not sure why it's not picking up eastern here.
df_list<-list()
for (i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
text<-gsub('ET-PU  MP  %FT','ET-PU     MP     %FT',text)
text<-recursive_replace(text)
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
final_df_2009<-do.call("rbind",df_list)  # this converts df_list into a dataframe.
colnames(final_df_2009)<-c('Institution','year','Employee','Job.Title','et','mp','percent_ft','Salary')
final_df_2009<-final_df_2009[(is.na(final_df_2009$Salary))==F,]
final_df_2009<-final_df_2009[,c(1:4,8,5:7)]  # Institution year Employee Job_title  Salary et mp percent_ft
final_df_2009$job.cat<-"other"
head(final_df_2009)
table(final_df_2009$et)
fix
final_df_2009[grep("basin",final_df_2009$Institution,ignore.case=T),]
table(final_df_2009$et)
final_df_2009[grep("ASSISTANT TO THE DIRECTOR",final_df_2009$et,ignore.case=T),]
final_df_2009[grep("FACILITIES OPERATIONS MAINTENANCE SPEC",final_df_2009$et,ignore.case=T),]
final_df_2009[grep("HOURLY TUTOR A",final_df_2009$et,ignore.case=T),]
table(final_df_2009$et)
final_df_2009[grep("PROFESSOR",final_df_2009$et,ignore.case=T),]
final_df_2009[grep("WALSH",final_df_2009$et,ignore.case=T),]
recursive_replace<-function(text=text){
text<-gsub('([[:alpha:]]) {2}([[:alpha:]])','\1 \2',text)
text<-gsub('ADAM   K.','ADAM K.',text)
text<-gsub('CHRISTOPHER   R.','CHRISTOPHER R.',text)
text<-gsub('CHRISTOPHER  T','CHRISTOPHER T.',text)
text<-gsub('KA   I W ','KA I.W.',text)
text<-gsub('I-YEU +\\(STEVE\\)','I-YEU, STEVE',text)
text<-gsub('E. +E. +WALSH','E.E. WALSH',text)
while (grepl('\\. +HRLY ',text)){
text<-gsub('\\. +HRLY',' HRLY',text)
print (grepl('\\. +HRLY ',text))
}
while (grepl("'S +\\)",text)){
text<-gsub("'S +\\)","'S\\)",text)
print (grepl("'S +\\)",text))
}
while (grepl(" {2,}- HOURLY",text)){
text<-gsub(" {2,}- HOURLY"," - HOURLY",text)
print (grepl(" {2,}- HOURLY",text))
}
while (grepl(' {2}',text)){
text<-gsub(' {2}','\t',text)
}
while (grepl('\t\t|\t \t',text)){
text<-gsub('\t\t|\t \t','\t',text)
print (grepl('\t\t|\t \t',text))
}
return(text)
}
mylist<-mylist_bak
r=list()
yr=list()
for (i in 1:length(mylist)){
if (grepl("Eastern",mylist[[i]][2])){ #I want to first try with parantheses, and if that fails, then use the idiosyncratic search for Eastern
r[[i]]<-regexec("^[[:digit:]]{4} (.*) [[:digit:]]{1}",mylist[[i]][2]);print("Eastern")
} else {
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
}
yr[[i]]<-regexec("^[[:digit:]]{4}",mylist[[i]][2])
} #'?' makes it less greedy  and I'm not sure why it's not picking up eastern here.
df_list<-list()
for (i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
text<-gsub('ET-PU  MP  %FT','ET-PU     MP     %FT',text)
text<-recursive_replace(text)
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
final_df_2009<-do.call("rbind",df_list)  # this converts df_list into a dataframe.
colnames(final_df_2009)<-c('Institution','year','Employee','Job.Title','et','mp','percent_ft','Salary')
final_df_2009<-final_df_2009[(is.na(final_df_2009$Salary))==F,]
final_df_2009<-final_df_2009[,c(1:4,8,5:7)]  # Institution year Employee Job_title  Salary et mp percent_ft
final_df_2009$job.cat<-"other"
head(final_df_2009)
table(final_df_2009$et)
final_df_2009[grep("WALSH",final_df_2009$Employee,ignore.case=T),]
table(final_df_2009$et)
final_df_2009[grep("1C",final_df_2009$et,ignore.case=T),]
final_df_2009[grep("7S ",final_df_2009$et,ignore.case=T),]
final_df_2009[grep("7S",final_df_2009$et,ignore.case=T),]
final_df_2009[51329:51333,]
final_df_2009[51320:51333,]
table(is.na(final_df_2009$Institution))
recursive_replace<-function(text=text){
text<-gsub('([[:alpha:]]) {2}([[:alpha:]])','\1 \2',text)
text<-gsub('ADAM   K.','ADAM K.',text)
text<-gsub('CHRISTOPHER   R.','CHRISTOPHER R.',text)
text<-gsub('CHRISTOPHER  T','CHRISTOPHER T.',text)
text<-gsub('KA   I W ','KA I.W.',text)
text<-gsub('I-YEU +\\(STEVE\\)','I-YEU, STEVE',text)
text<-gsub('E. +E. +WALSH','E.E. WALSH',text)
text<-gsub('ADMIN  SERVICES MANAGER A','ADMIN SERVICES MANAGER A',text)
while (grepl('\\. +HRLY ',text)){
text<-gsub('\\. +HRLY',' HRLY',text)
print (grepl('\\. +HRLY ',text))
}
while (grepl("'S +\\)",text)){
text<-gsub("'S +\\)","'S\\)",text)
print (grepl("'S +\\)",text))
}
while (grepl(" {2,}- HOURLY",text)){
text<-gsub(" {2,}- HOURLY"," - HOURLY",text)
print (grepl(" {2,}- HOURLY",text))
}
while (grepl(' {2}',text)){
text<-gsub(' {2}','\t',text)
}
while (grepl('\t\t|\t \t',text)){
text<-gsub('\t\t|\t \t','\t',text)
print (grepl('\t\t|\t \t',text))
}
return(text)
}
mylist<-mylist_bak
mylist[[5]][2]
mylist[[6]][2]
r=list()
yr=list()
for (i in 1:length(mylist)){
if (grepl("Eastern",mylist[[i]][2])){ #I want to first try with parantheses, and if that fails, then use the idiosyncratic search for Eastern
r[[i]]<-regexec("^[[:digit:]]{4} (.*) [[:digit:]]{1}",mylist[[i]][2]);print("Eastern")
} else {
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
}
yr[[i]]<-regexec("^[[:digit:]]{4}",mylist[[i]][2])
} #'?' makes it less greedy  and I'm not sure why it's not picking up eastern here.
r
final_df_2009[final_df_2009$Institution==NA,2]
final_df_2009[is.na(final_df_2009$Institution),2]
final_df_2009[is.na(final_df_2009$Institution),1]
mylist[[2]][2]
mylist[[2]][6]
mylist[[2]][7]
mylist[[6]][2]
final_df_2009[is.na(final_df_2009$Institution),1]<-"Eastern Wa Univ"
final_df<-read.csv( file = "./final_df.csv")
getwd()
final_df<-read.csv( file = "./scripts/final_df.csv")
adminOther.list<-grep("admin", final_df$Job.Title, ignore.case=T, value=F)
chancellor.list<-grep("CHANCELLOR", final_df$Job.Title, ignore.case=T, value=F)
childhood.list<-grep("childho", final_df$Job.Title, ignore.case=T, value=F)
communication.list<-grep("commun", final_df$Job.Title, ignore.case=T, value=F)
coordination.list<-grep("coord,", final_df$Job.Title, ignore.case=T, value=F)
counselor.list<-grep("counselo", final_df$Job.Title, ignore.case=T, value=F)
dean.list<-grep("dean|assistant d|ASSOC. DEAN", final_df$Job.Title, ignore.case=T)
director.list<-grep("dir", final_df$Job.Title, ignore.case=T) #, value=T)
exec.list<-c(grep("exec. d", final_df$Job.Title, ignore.case=T))
facilities.list<-grep("facilit|custo|electr|grounds|locks|maintan|mechanic", final_df$Job.Title, ignore.case=T, value=F)
faculty.list<-grep("faculty|professor", final_df$Job.Title, ignore.case=T)
finance.list<-grep("financ|budget|capita|fiscal", final_df$Job.Title, ignore.case=T, value=F)
hour.list<-grep("hour", final_df$Job.Title, ignore.case=T, value=F)
HR.list<-grep("HR|benefits|human|payrol", final_df$Job.Title, ignore.case=T, value=F)
library.list<-grep("librar", final_df$Job.Title, ignore.case=T, value=F)
mail.list<-grep("mail", final_df$Job.Title, ignore.case=T, value=F)
manager.list<-c(grep("mgr", final_df$Job.Title, ignore.case=T), grep("manag", final_df$Job.Title, ignore.case=T))
media.list<-grep("media", final_df$Job.Title, ignore.case=T, value=F)
officeAssist.list<-grep("office assistant|PROGRAM ASSISTANT|ADMINISTRATIVE ASSIST", final_df$Job.Title, ignore.case=T)
president.list<-grep("presi|v.c.,|chief", final_df$Job.Title, ignore.case=T, value=F)
programCoord.list<-grep("program coord", final_df$Job.Title, ignore.case=T, value=F)
retail.list<-grep("retail", final_df$Job.Title, ignore.case=T, value=F)
secretary.list<-grep("secr|exec. a", final_df$Job.Title, ignore.case=T) #, value=T)
security.list<-grep("security", final_df$Job.Title, ignore.case=T, value=F)
specialist.list<-grep("spec", final_df$Job.Title, ignore.case=T, value=F)
supervisory.list<-grep("superv|spv", final_df$Job.Title, ignore.case=T, value=F)
support.list<-grep("supt", final_df$Job.Title, ignore.case=T, value=F)
vice.list<-grep("vice p|vp", final_df$Job.Title, ignore.case=T, value=F)
vChanc.list<-grep("VICE CHANCELLOR|V\\.C.", final_df$Job.Title, ignore.case=T, value=F)
final_df$job.cat<-factor(final_df$job.cat,
sort(c(
"admin (Other)",
"assistant",
"chancellor",
"childhood",
"communication",
"coordination",
"counselor",
"dean",
"director",
"executive",
"facilities",
"faculty",
"finance",
"hourly",
"HR",
"library",
"mail",
"manager",
"media",
"other",
"pres",
"program coordinator",
"retail",
"secretary",
"security",
"specialist",
"supervisory",
"support",
"vicepres",
"viceChanc"
)
))
##WARNING; BEWARE OF CHANGING ORDER BELOW, ELSE CATEGORIES WILL CHANGE
final_df$job.cat[adminOther.list]<-"admin (Other)"
final_df$job.cat[HR.list]<-"HR"
final_df$job.cat[security.list]<-"security"
final_df$job.cat[finance.list]<-"finance"
final_df$job.cat[facilities.list]<-"facilities"
final_df$job.cat[mail.list]<-"mail"
final_df$job.cat[media.list]<-"media"
final_df$job.cat[communication.list]<-"communication"
final_df$job.cat[coordination.list]<-"coordination"
final_df$job.cat[support.list]<-"support"
final_df$job.cat[library.list]<-"library"
final_df$job.cat[supervisory.list]<-"supervisory"
final_df$job.cat[counselor.list]<-"counselor"
final_df$job.cat[retail.list]<-"retail"
final_df$job.cat[programCoord.list]<-"program coordinator"
final_df$job.cat[director.list]<-"director"
final_df$job.cat[hour.list]<-"hourly"
final_df$job.cat[faculty.list]<-"faculty"
final_df$job.cat[dean.list]<-"dean"
final_df$job.cat[childhood.list]<-"childhood"
final_df$job.cat[manager.list]<-"manager"
final_df$job.cat[exec.list]<-"executive"
final_df$job.cat[secretary.list]<-"secretary"
final_df$job.cat[officeAssist.list]<-"assistant"
final_df$job.cat[chancellor.list]<-"chancellor"
final_df$job.cat[specialist.list]<-"specialist"
final_df$job.cat[president.list]<-"pres"
final_df$job.cat[vice.list]<-"vicepres"
final_df$job.cat[vChanc.list]<-"viceChanc"
director.salary<-final_df[director.list,]
dean.salary<-final_df[dean.list,]
sec.salary<-final_df[secretary.list,]
director.salary<-final_df[director.list,]
table(final_df$job.cat)
final_df$year<-as.factor(final_df$year)
summary(final_df)
n
N
describe(final_df)
library('Hmisc')
describe(final_df)
mytable <- xtabs(Job.Title~year, data=final_df)
ftable(mytable) # print table
mytable <- xtabs(Job.Title~year, data=final_df)
mytable <- xtabs(Job.Title,year, data=final_df)
str(final_df)
mytable <- xtabs(Job.Title, data=final_df)
mytable <- xtabs(final_df$Job.Title)
mytable <- xtabs(final_df$Job.Title~final_df$year)
class(final_df$Job.Title)
class(final_df$year)
mytable <- xtabs(final_df$Job.Title+final_df$year)
mytable <- xtabs(~final_df$Job.Title+final_df$year)
ftable(mytable)
head(mytable)
mytable <- xtabs(~final_df$Job.Title+final_df$year+final_df$Agency)
ftable(mytable)
length(unique(final_df$Employee))
final_df[grep("HOLT, Brian",final_df$Employee,ignore.case=T),]
final_df[grep("HOLT, B|HOLT, \\*rian",final_df$Employee,ignore.case=T),]
final_df[grep("HOLT, Brian|HOLT, \\*rian",final_df$Employee,ignore.case=T),]
tapply(final_df$Salary,list(final_df$Agency,final_df$year),mean,na.rm=T)
final_df[grep("jenne",final_df$Employee,ignore.case=T),]
final_df[grep(" JENNE, RALPH W",final_df$Employee,ignore.case=T),]
final_df[grep("JENNE, RALPH W",final_df$Employee,ignore.case=T),]
final_df[grep("JENNE, ",final_df$Employee,ignore.case=T)&final_df$Code==670,]
final_df[grep("JENNE, ",final_df$Employee,ignore.case=T)&&final_df$Code==670,]
final_df[c(grep("JENNE, ",final_df$Employee,ignore.case=T),final_df$Code==670),]
final_df$year<-as.factor(final_df$year)
df$year<-as.Date(paste(df$year,"-06","-30",sep=""))
tbl<-as.data.frame(table(final_df$Salary,final_df$year))
tbl<-as.data.frame(table(final_df$Salary,final_df$year,final_df$Agency))
head(tbl)
colnames(tbl)<-c('Salary','year','Agency''Freq')
colnames(tbl)<-c('Salary','year','Agency','Freq')
head(tbl)
tapply(tbl$Freq,tbl$year,sum)
tapply(tbl$Freq,list(tbl$Agency,tbl$year),sum)
getwd()
dir<-getwd()
setwd(paste0(dir,'scripts'))
(paste0(dir,'scripts'))
(paste0(dir,'/scripts'))
setwd(paste0(dir,'/scripts'))
colleges_df<-read.csv('./colleges_df.csv')
str(colleges_df)
colleges_df<-read.csv('./colleges_df.csv',header=T)
colleges_df<-read.csv('./colleges_df.csv',header=T,sep='\t')
colleges_df<-read.delim('./colleges_df.csv',header=T,sep='\t')
colleges_df<-read.delim('./colleges_df.csv',header=T)
hea(colleges_df)
head(colleges_df)
