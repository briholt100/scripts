//a[contains(text(),'WSU')] |
//a[contains(text(),'Olympic Co')] |
//a[contains(text(),'Univ ')] "
links<-vector("list",length(page_list))
for (i in 1:length(page_list)){
# This pulls the <a> names of link
links[[i]]<-cbind(xpathSApply(page_list[[i]],searchTerms,xmlValue),
# This pulls the links themselves.
getHTMLLinks(page_list[[i]],xpQuery=gsub(']',']/@href',searchTerms)))
}
links<-do.call('rbind',links)
writeLines("Here are the first few items of links:\n\n")
print(head(links,3))
writeLines("\n\nHhere are the last few items of links:\n\n")
print(tail(links,3))
return(links)
}
# This simply gives a user input to which year of interest.
select_year<-function(){
year<-""
choices<-c('2011', '2009', '2007', "2005", "2003")
year<-readline(prompt= '\n\nPlease enter a following year: 2011, 2009, 2007, 2005, or 2003....\n')
if (year %in% choices)
{writeLines(paste0('\n\nThank you, pulling the data from year ',year,'\n\n'));
return(year)} else{
writeLines('Please try again.Select only from 2011, 2009, 2007, 2005, or 2003\n\n');
select_year()}
}
# This makes the actual list of data, by year, that will make the final dataframe
make_list<-function(links=NULL,year=NULL){
#check if links variable exists and use it.
if(nrow(links)==0){links<-get_links()}else{print(paste("There are ",nrow(links),"url's in 'links'"))}
year<-select_year()
link<-links[grep(year,links),]
mylist<-vector("list", length=nrow(link))
for(i in 1:nrow(link)){
text<-link[i,2] %>% url %>% read_html() %>%
html_nodes(xpath= '//pre') %>%
html_text(trim=F) #this pulls out the actual pre text
mylist[[i]]<-text  # This puts the text into each element
mylist[[i]][2]<-link[i,1] # Puts agency info into the 2nd element of the list
}
writeLines(paste('\nok, the list has been pulled from ',year,". Enjoy.\n\n"))
return(mylist)
}
## This function is used for some years.  It removes dobule spaces and replaces
# with eventual single tabs, making read.delim functional
recursive_replace<-function(text=text){
text<-gsub('([[:alpha:]]) {2}([[:alpha:]])','\1 \2',text)
text<-gsub('ADAM   K.','ADAM K.',text)
text<-gsub('CHRISTOPHER   R.','CHRISTOPHER R.',text)
text<-gsub('CHRISTOPHER  T','CHRISTOPHER T.',text)
text<-gsub('KA   I W ','KA I.W.',text)
text<-gsub('I-YEU +\\(STEVE\\)','I-YEU, STEVE',text)
text<-gsub('E. +E. +WALSH','E.E. WALSH',text)
text<-gsub('ADMIN  SERVICES MANAGER A','ADMIN SERVICES MANAGER A',text)
while (grepl('\\. +HRLY ',text)){
text<-gsub('\\. +HRLY',' HRLY',text)
print (grepl('\\. +HRLY ',text))
}
while (grepl("'S +\\)",text)){
text<-gsub("'S +\\)","'S\\)",text)
print (grepl("'S +\\)",text))
}
while (grepl(" {2,}- HOURLY",text)){
text<-gsub(" {2,}- HOURLY"," - HOURLY",text)
print (grepl(" {2,}- HOURLY",text))
}
while (grepl(' {2}',text)){
text<-gsub(' {2}','\t',text)
}
while (grepl('\t\t|\t \t',text)){
text<-gsub('\t\t|\t \t','\t',text)
print (grepl('\t\t|\t \t',text))
}
return(text)
}
links<-get_links()
mylist<-make_list(links) #links=links can also be used after previous line run
##########
##For 2011:  Note that Z is added to all last names
for(i in 1:length(mylist)){ #ideally this should be an apply funciton
mylist[[i]][1]<-gsub('^\n|(\r\n){2,}','\r\n',mylist[[i]][1])
}
wid<-vector("list",length(mylist))  # this simply works for finding the name.  Now salary and title need distinguishing
for(i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
title_start<-gregexpr('Job Title',text)
sal_start<-gregexpr('2010 Gross Earnings',text)
end_line<-gregexpr("(\r*\n)+",text)
wid[[i]]<-c(title_start[[1]][1]-2,sal_start[[1]][1],sal_start[[1]][1]+21)
}
wid[[1]]
wid[[36]]
n<-vector("integer",length(mylist))
t<-vector("integer",length(mylist))
s<-vector("integer",length(mylist))
for (i in 1:length(wid)){
n[i]<-as.integer(wid[[i]][1]-2) #the 'minus' 1 moves the cursor to just before the beginning of the word
t[i]<-as.integer(wid[[i]][2]-2) #the 'minus' 1 moves the cursor to just before the beginning of the word
s[i]<-as.integer(wid[[i]][3]-2) #this moves 10 positions sooner in the line
}
n
t
s
#what follows below is a loop that addes a tab chara to a specific numerical position in mylist[[i]], and converts double spaces into single tabs
rhs<-'\\1\t'
###
###  The problem with this code is that it's inserting a tab before the first name, of the first record, after the column titles, thus pushing the first line to the right 1 too many collumns.  So, I need to have it igore the first carriage return ^(\r\n)...this is tricky because the caret here can mean either the front of the line or a negation.  I sorta want both.
####
#obtaining year for gregexpr and name of school
r=list()
yr=list()
for (i in 1:length(mylist)){
if (grepl("Eastern",mylist[[i]][2])){ #I want to first try with parantheses, and if that fails, then use the idiosyncratic search for Eastern
r[[i]]<-regexec("^[[:digit:]]{4} (.*) [[:digit:]]{1}",mylist[[i]][2]);print("Eastern")
} else {
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
}
yr[[i]]<-regexec("^[[:digit:]]{4}",mylist[[i]][2])
} #'?' makes it less greedy  and I'm not sure why it's not picking up eastern here.
for (i in 1:length(mylist)){
lhs1<-paste0('(\n.{', n[i],'})')
lhs2<-paste0('(\n.{', t[i],'})')
lhs3<-paste0('(\n.{', s[i],'})')
mylist[[i]][1]<-gsub(lhs1,rhs,mylist[[i]][1])  #this adds a tab after last space before title.
mylist[[i]][1]<-gsub(lhs2,rhs,mylist[[i]][1])  #this adds a tab 10 spaces before  end of line (salary)
mylist[[i]][1]<-gsub(lhs3,rhs,mylist[[i]][1])  #this adds a tab 10 spaces before  end of line (salary)
mylist[[i]][1]<-gsub('Earnings(\r)*\n\t','Earnings\r\n',mylist[[i]][1])
mylist[[i]][1]<-recursive_replace(mylist[[i]][1])
}
df_list<-vector("list",length(mylist))
for(i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
sapply(df_list,length)####checks that colleges have 4 columns instead of 5
final_df_2011<-do.call("rbind",df_list)  # this converts df_list into a dataframe.
colnames(final_df_2011)<-c('Institution','year','Employee','Job.Title','Salary')
final_df_2011$Salary<-as.numeric(final_df_2011$Salary)
final_df_2011<-final_df_2011[(is.na(final_df_2011$Salary))==F,]
final_df_2011$Employee<-gsub('Z,',',',final_df_2011$Employee)
final_df_2011$et<-NA
final_df_2011$mp<-NA
final_df_2011$percent_ft<-NA
final_df_2011$year<-2010 #done because bloom has 2010, but calls it 2011
final_df_2011$job.cat<-"other"
head(final_df_2011)
str(final_df_2011)
getwd()
paste(getwd())
paste(getwd(),'/scripts')
paste0(getwd(),'/scripts')
setwd(paste0(getwd(),'/scripts'))
getwd()
write.csv(final_df_2011, append=F,file = "./final_df_2011.csv")
mylist<-make_list(links) #links=links can also be used after previous line run
mylist_bak<-mylist
for (i in 1:length(mylist)){
if (grepl("Eastern Wa Univ \\(",mylist[[i]][2])){ #I want to first try with parantheses, and if that fails, then use the idiosyncratic search for Eastern
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
} else {
if (grepl("Eastern Wa Univ [[:digit:]]{1}",mylist[[i]][2])){
r[[i]]<-regexec("^[[:digit:]]{4} (.*) [[:digit:]]{1}",mylist[[i]][2]);print("Eastern")
}else{
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
}
} #'?' makes it less greedy  and I'm not sure why it's not picking up eastern here.
yr[[i]]<-regexec("^[[:digit:]]{4}",mylist[[i]][2])
}
df_list<-list()
for (i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
text<-gsub('ET-PU  MP  %FT','ET-PU     MP     %FT',text)
text<-recursive_replace(text)
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
final_df_2009<-do.call("rbind",df_list)  # this converts df_list into a dataframe.
colnames(final_df_2009)<-c('Institution','year','Employee','Job.Title','et','mp','percent_ft','Salary')
final_df_2009<-final_df_2009[(is.na(final_df_2009$Salary))==F,]
final_df_2009<-final_df_2009[,c(1:4,8,5:7)]  # Institution year Employee Job_title  Salary et mp percent_ft
final_df_2009$job.cat<-"other"
head(final_df_2009)
write.csv(final_df_2009, file = "./final_df_2009.csv")
mylist<-make_list(links) #links=links can also be used after previous line run
mylist_bak<-mylist
##
# This works for: 2007,
table(final_df_2007$et) table(final_df_2007$Institution)
r=list()
yr=list()
for (i in 1:length(mylist)){
if (grepl("Eastern Wa Univ \\(",mylist[[i]][2])){ #I want to first try with parantheses, and if that fails, then use the idiosyncratic search for Eastern
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
} else {
if (grepl("Eastern Wa Univ [[:digit:]]{1}",mylist[[i]][2])){
r[[i]]<-regexec("^[[:digit:]]{4} (.*) [[:digit:]]{1}",mylist[[i]][2]);print("Eastern")
}else{
r[[i]]<-regexec("^[[:digit:]]{4} (.*) \\(",mylist[[i]][2])
}
} #'?' makes it less greedy  and I'm not sure why it's not picking up eastern here.
yr[[i]]<-regexec("^[[:digit:]]{4}",mylist[[i]][2])
}
df_list<-list()
for (i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
text<-gsub('ET-PU  MP  %FT','ET-PU     MP     %FT',text)
text<-recursive_replace(text)
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
final_df_2007<-do.call("rbind",df_list)  # this converts df_list into a dataframe.
colnames(final_df_2007)<-c('Institution','year','Employee','Job.Title','et','mp','percent_ft','Salary')
final_df_2007<-final_df_2007[(is.na(final_df_2007$Salary))==F,]
final_df_2007<-final_df_2007[,c(1:4,8,5:7)]  # Institution year Employee Job_title  Salary et mp percent_ft
final_df_2007$job.cat<-"other"
head(final_df_2007)
write.csv(final_df_2007, file = "./final_df_2007.csv")
mylist<-make_list(links) #links=links can also be used after previous line run
mylist_bak<-mylist
for (i in 1:length(mylist)){
mylist[[i]][1]<-recursive_replace(mylist[[i]][1])
mylist[[i]][1]<-gsub('\t *\r','\r',mylist[[i]][1])
}
df_list<-list()
for (i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
text<-gsub('ET-PU  MP  %FT','ET-PU     MP     %FT',text)
text<-recursive_replace(text)
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
final_df_2005<-do.call("rbind",df_list)  # this converts df_list into a dataframe.
colnames(final_df_2005)<-c('Institution','year','Employee','Job.Title','Salary')
final_df_2005$Salary<-as.numeric(final_df_2005$Salary)
final_df_2005<-final_df_2005[(is.na(final_df_2005$Salary))==F,]
final_df_2005$Employee<-gsub('Z,',',',final_df_2005$Employee)
final_df_2005$et<-NA
final_df_2005$mp<-NA
final_df_2005$percent_ft<-NA
#Institution year Employee Job_title  Salary et mp percent_ft
final_df_2005$job.cat<-"other"
head(final_df_2005)
write.csv(final_df_2005, file = "./final_df_2005.csv")
mylist<-make_list(links) #links=links can also be used after previous line run
mylist_bak<-mylist
## For 2003,
for (i in 1:length(mylist)){
mylist[[i]][1]<-gsub(', +\\*',', \\*',mylist[[i]][1])
mylist[[i]][1]<-recursive_replace(mylist[[i]][1])
mylist[[i]][1]<-gsub('\t *\r','\r',mylist[[i]][1])
mylist[[i]][1]<-gsub('\t \\*',' \\*',mylist[[i]][1])
}
df_list<-list()
for (i in 1:length(mylist)){
text<-as.character(mylist[[i]][1])
text<-recursive_replace(text)
df_list[[i]]<-cbind(#mylist[[i]][2],
regmatches(mylist[[i]][2],r[[i]])[[1]][2],
regmatches(mylist[[i]][2],yr[[i]]),
read.delim(textConnection(text),
header=F,
strip.white=T,
skip=2,
stringsAsFactors=F)
)
}
sapply(df_list,length)
final_df_2003<-do.call("rbind",df_list)  # this converts df_list into a dataframe.
colnames(final_df_2003)<-c('Institution','year','Employee','Job.Title','Salary')
final_df_2003$Salary<-as.numeric(final_df_2003$Salary)
final_df_2003<-final_df_2003[(is.na(final_df_2003$Salary))==F,]
final_df_2003$Employee<-gsub('Z,',',',final_df_2003$Employee)
final_df_2003$et<-NA
final_df_2003$mp<-NA
final_df_2003$percent_ft<-NA
#Institution year Employee Job_title  Salary et mp percent_ft
final_df_2003$job.cat<-"other"
head(final_df_2003)
write.csv(final_df_2003,file="I:\\My Data Sources\\Data\\final_df_2003.csv")  #on campus
write.csv(final_df_2003, file = "./final_df_2003.csv")
df<-rbind(final_df_2011,final_df_2009,final_df_2007,final_df_2005,final_df_2003)
write.csv(df, file = "./df.csv")
ac<-read.csv(file="./scripts/agency_code.csv")
ac<-read.csv(file="./agency_code.csv")
ac
final_df <- merge(df,ac, by.x="Institution", by.y="Institute", all.x=TRUE)  #this gets the correct names of agencies
final_df<- (final_df[,c(10,11,3:4,9,2,5:8)])
head(final_df)
library('lme4')
library('nlme')
library('stringr')
library('plyr')
library('dplyr')
library('data.table')
library('tidyr')
library('ggplot2')
library('Hmisc')
library('XML')
library('httr')
library('rvest')
#####
#set wd
####
#Campus
#wrkdir<-'I:/My Data Sources/'
#Home
wrkdir<-'/home/brian/Projects/scripts'
setwd(wrkdir)
fileUrl <- 'http://fiscal.wa.gov/WaStEmployeeHistSalary.txt'
if (!file.exists("../Data")) {
dir.create("../Data")
}
######
# Check if data already exists; if not, download it.
######
#do a join of wrkdir with data/textFile.
ifelse (!file.exists('../Data/WaStEmployeeHistSalary.txt')
, download.file(fileUrl, '../Data/WaStEmployeeHistSalary.txt', method='auto')
, "file exists")
#test<-fread("grep 'College' /home/brian/Projects/data/WaStEmployeeHistSalary.txt",sep='\t')
#fread("grep 'Holt' /home/brian/Projects/data/addresses.csv")
#campus
#salary<-read.csv('../Data/WaStEmployeeHistSalary.txt',                 sep='\t' ,stringsAsFactors=T,strip.white=T,na.strings=c('0',''))
#home
#home
salary<-read.csv("../Data/WaStEmployeeHistSalary.txt", #use .txt1 for campus
sep='\t' ,stringsAsFactors=T,strip.white=T,na.strings=c('0',''))
salary[,1]<-as.factor(salary[,1])
##This, in one step, removes commas from salary data and converts to numeric
salary[,5:8]<-sapply(salary[,5:8], FUN = function(x) as.numeric(gsub(",","",x)))
#
# below is the money earned by Pete at Edmonds.  For some reason, the main file shows he worked at edmonds but received no money; I then saved it
salary[56855,5]<-8732
#write.table(salary,'./Data/WaStEmployeeHistSalary.txt',sep='\t')
#write.table(salary,"/home/brian/Projects/Data/WaStEmployeeHistSalary.txt",sep='\t')
str(salary)
salary$job.cat<-"other"
colleges<-salary[grep('college|university|State Board for Comm and Tech Coll',salary$Agency,ignore.case=T),]
colleges<-droplevels(colleges)
collegeCodes<-sort(unique(colleges$Code))
head(colleges)
Agency_code<-unique(colleges[c("Code","Agency")])
tail(colleges)
table(colleges$Agency=="State Board for Comm and Tech Coll")
colleges_longForm<-gather(colleges,year,Salary,X2011:X2014)
levels(colleges_longForm$year)[levels(colleges_longForm$year)=="X2011"] <- "2011"
levels(colleges_longForm$year)[levels(colleges_longForm$year)=="X2012"] <- "2012"
levels(colleges_longForm$year)[levels(colleges_longForm$year)=="X2013"] <- "2013"
levels(colleges_longForm$year)[levels(colleges_longForm$year)=="X2014"] <- "2014"
colleges_longForm$et<-NA
colleges_longForm$mp<-NA
colleges_longForm$percent_ft<-NA
head(colleges_longForm)
write.table(colleges_longForm,'./salaryByYear.txt',sep='\t')
head(final_df)
final_df<-rbind(final_df,colleges_longForm)   ##########this rbinds salary and finaldf2011
write.csv(final_df, file = "./final_df.csv")
tapply(final_df$Salary,final_df$year,mean,na.rm=T)
tapply(final_df$Salary[final_df$Salary>1500],final_df$year[final_df$Salary>1500],mean,na.rm=T)
tbl1<-table(final_df$job.cat[!is.na(final_df$Salary)],final_df$year[!is.na(final_df$Salary)])
tbl1
by
by(tapply(final_df$Salary[final_df$Salary>1500],final_df$year[final_df$Salary>1500],mean,na.rm=T),final_df$Agency)
by(final_df$Salary,2,table)
by(final_df,2,table)
by(final_df,2,sum)
by(final_df$Salary,final_df$Agency,sum)
by(final_df$Salary,final_df$Agency,sum,na.rm=T)
by(final_df$Salary,c(final_df$Agency),sum,na.rm=T)
by(final_df$Salary,c(final_df$Agency,final_df$year),sum,na.rm=T)
func<-function(salary,year){tapply(x,y,mean,na.rm=T)}
class(final_df$year)
as.factor(final_df$year)
final_df$year<-as.factor(final_df$year)
tapply(final_df$Salary,final_df$year,func())
tapply(final_df$Salary,final_df$Agency,func(final_df$Salary,final_df$year))
func<-function(x,yr){tapply(x,y,mean,na.rm=T)}
tapply(final_df$Salary,final_df$Agency,func(x=final_df$Salary,y=final_df$year))
func<-function(x,y){tapply(x,y,mean,na.rm=T)}
tapply(final_df$Salary,final_df$Agency,func(x=final_df$Salary,y=final_df$year))
func<-function(x,y){tapply(x,y,mean,na.rm=T)}
func(x=final_df$Salary,y=final_df$year)
tapply(final_df$Salary,final_df$Agency,mean,na.rm=T)
tapply(final_df$Salary,final_df$Agency,func,x=final_df$Salary,y=final_df$year)
tapply(final_df$Salary,final_df$Agency,func)
tapply(final_df$Salary,list(final_df$Agency,final_df$year),mean,na.rm=T)
plot(tapply(final_df$Salary,list(final_df$Agency,final_df$year),mean,na.rm=T))
adminOther.list<-grep("admin", final_df$Job.Title, ignore.case=T, value=F)
chancellor.list<-grep("CHANCELLOR", final_df$Job.Title, ignore.case=T, value=F)
childhood.list<-grep("childho", final_df$Job.Title, ignore.case=T, value=F)
communication.list<-grep("commun", final_df$Job.Title, ignore.case=T, value=F)
coordination.list<-grep("coord,", final_df$Job.Title, ignore.case=T, value=F)
counselor.list<-grep("counselo", final_df$Job.Title, ignore.case=T, value=F)
dean.list<-grep("dean|assistant d|ASSOC. DEAN", final_df$Job.Title, ignore.case=T)
director.list<-grep("dir", final_df$Job.Title, ignore.case=T) #, value=T)
exec.list<-c(grep("exec. d", final_df$Job.Title, ignore.case=T))
facilities.list<-grep("facilit|custo|electr|grounds|locks|maintan|mechanic", final_df$Job.Title, ignore.case=T, value=F)
faculty.list<-grep("faculty|professor", final_df$Job.Title, ignore.case=T)
finance.list<-grep("financ|budget|capita|fiscal", final_df$Job.Title, ignore.case=T, value=F)
hour.list<-grep("hour", final_df$Job.Title, ignore.case=T, value=F)
HR.list<-grep("HR|benefits|human|payrol", final_df$Job.Title, ignore.case=T, value=F)
library.list<-grep("librar", final_df$Job.Title, ignore.case=T, value=F)
mail.list<-grep("mail", final_df$Job.Title, ignore.case=T, value=F)
manager.list<-c(grep("mgr", final_df$Job.Title, ignore.case=T), grep("manag", final_df$Job.Title, ignore.case=T))
media.list<-grep("media", final_df$Job.Title, ignore.case=T, value=F)
officeAssist.list<-grep("office assistant|PROGRAM ASSISTANT|ADMINISTRATIVE ASSIST", final_df$Job.Title, ignore.case=T)
president.list<-grep("presi|v.c.,|chief", final_df$Job.Title, ignore.case=T, value=F)
programCoord.list<-grep("program coord", final_df$Job.Title, ignore.case=T, value=F)
retail.list<-grep("retail", final_df$Job.Title, ignore.case=T, value=F)
secretary.list<-grep("secr|exec. a", final_df$Job.Title, ignore.case=T) #, value=T)
security.list<-grep("security", final_df$Job.Title, ignore.case=T, value=F)
specialist.list<-grep("spec", final_df$Job.Title, ignore.case=T, value=F)
supervisory.list<-grep("superv|spv", final_df$Job.Title, ignore.case=T, value=F)
support.list<-grep("supt", final_df$Job.Title, ignore.case=T, value=F)
vice.list<-grep("vice p|vp", final_df$Job.Title, ignore.case=T, value=F)
vChanc.list<-grep("VICE CHANCELLOR|V\\.C.", final_df$Job.Title, ignore.case=T, value=F)
final_df$job.cat<-factor(final_df$job.cat,
sort(c(
"admin (Other)",
"assistant",
"chancellor",
"childhood",
"communication",
"coordination",
"counselor",
"dean",
"director",
"executive",
"facilities",
"faculty",
"finance",
"hourly",
"HR",
"library",
"mail",
"manager",
"media",
"other",
"pres",
"program coordinator",
"retail",
"secretary",
"security",
"specialist",
"supervisory",
"support",
"vicepres",
"viceChanc"
)
))
##WARNING; BEWARE OF CHANGING ORDER BELOW, ELSE CATEGORIES WILL CHANGE
final_df$job.cat[adminOther.list]<-"admin (Other)"
final_df$job.cat[HR.list]<-"HR"
final_df$job.cat[security.list]<-"security"
final_df$job.cat[finance.list]<-"finance"
final_df$job.cat[facilities.list]<-"facilities"
final_df$job.cat[mail.list]<-"mail"
final_df$job.cat[media.list]<-"media"
final_df$job.cat[communication.list]<-"communication"
final_df$job.cat[coordination.list]<-"coordination"
final_df$job.cat[support.list]<-"support"
final_df$job.cat[library.list]<-"library"
final_df$job.cat[supervisory.list]<-"supervisory"
final_df$job.cat[counselor.list]<-"counselor"
final_df$job.cat[retail.list]<-"retail"
final_df$job.cat[programCoord.list]<-"program coordinator"
final_df$job.cat[director.list]<-"director"
final_df$job.cat[hour.list]<-"hourly"
final_df$job.cat[faculty.list]<-"faculty"
final_df$job.cat[dean.list]<-"dean"
final_df$job.cat[childhood.list]<-"childhood"
final_df$job.cat[manager.list]<-"manager"
final_df$job.cat[exec.list]<-"executive"
final_df$job.cat[secretary.list]<-"secretary"
final_df$job.cat[officeAssist.list]<-"assistant"
final_df$job.cat[chancellor.list]<-"chancellor"
final_df$job.cat[specialist.list]<-"specialist"
final_df$job.cat[president.list]<-"pres"
final_df$job.cat[vice.list]<-"vicepres"
final_df$job.cat[vChanc.list]<-"viceChanc"
table(final_df$job.cat)
